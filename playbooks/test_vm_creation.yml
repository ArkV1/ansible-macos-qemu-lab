---
- name: Test VM Creation on MacOS Host
  hosts: macos_hosts
  gather_facts: true
  vars:
    vm_name: "test-ubuntu"
    vm_memory: "2048"
    vm_cpus: "2"
    vm_disk_size: "10G"
    vm_image_url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
    vm_base_dir: "{{ ansible_env.HOME }}/vms/test"
    ssh_port_start: 2222
    ssh_port_end: 2299
    homebrew_prefix: "/opt/homebrew"

  pre_tasks:
    - name: Ensure VM base directory exists
      file:
        path: "{{ vm_base_dir }}"
        state: directory
        mode: '0755'

    - name: Find available SSH port
      block:
        - name: Get ports from inventory file
          shell: |
            if [ -f "{{ playbook_dir }}/../inventory/hosts" ]; then
              grep -E "ansible_port=[0-9]+" "{{ playbook_dir }}/../inventory/hosts" | sed -E 's/.*ansible_port=([0-9]+).*/\1/' || true
            fi
          register: inventory_ports
          changed_when: false
          
        - name: Find available port
          shell: |
            used_ports=($({{ inventory_ports.stdout_lines | default([]) | join(' ') }}))
            for port in $(seq {{ ssh_port_start }} {{ ssh_port_end }}); do
              # Check if port is in use by any process
              if ! lsof -i :$port > /dev/null 2>&1; then
                # Double check with netstat for better reliability
                if ! netstat -an | grep -q "\.${port}[[:space:]]"; then
                  # Check if port is not in inventory
                  if ! echo ${used_ports[@]} | grep -q "$port"; then
                    # Verify port is truly available by attempting to bind to it
                    if (python3 -c "import socket; s=socket.socket(); s.bind(('', $port)); s.close()" 2>/dev/null); then
                      echo $port
                      break
                    fi
                  fi
                fi
              fi
            done
          register: available_port
          changed_when: false

        - name: Verify port availability one final time
          wait_for:
            port: "{{ available_port.stdout }}"
            state: stopped
            timeout: 5
          when: available_port.stdout != ""

    - name: Set SSH port
      set_fact:
        ssh_port: "{{ available_port.stdout }}"

    - name: Fail if no ports are available
      fail:
        msg: "No available ports found in range {{ ssh_port_start }}-{{ ssh_port_end }}"
      when: not ssh_port | int

    - name: Display selected port
      debug:
        msg: "Using SSH port: {{ ssh_port }}"

  tasks:
    - name: Ensure VM directory exists
      file:
        path: "{{ vm_base_dir }}/{{ vm_name }}"
        state: directory
        mode: '0755'

    - name: Download Ubuntu cloud image
      get_url:
        url: "{{ vm_image_url }}"
        dest: "{{ vm_base_dir }}/{{ vm_name }}/base.img"
        mode: '0644'

    - name: Create VM disk
      command: |
        {{ homebrew_prefix }}/bin/qemu-img create -f qcow2 -F qcow2 \
          -b "{{ vm_base_dir }}/{{ vm_name }}/base.img" \
          "{{ vm_base_dir }}/{{ vm_name }}/disk.qcow2" {{ vm_disk_size }}
      args:
        creates: "{{ vm_base_dir }}/{{ vm_name }}/disk.qcow2"

    - name: Get local SSH key
      slurp:
        src: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
      register: ssh_key

    - name: Create cloud-init user-data
      copy:
        dest: "{{ vm_base_dir }}/{{ vm_name }}/user-data"
        mode: '0644'
        content: |
          #cloud-config
          users:
            - name: ubuntu
              sudo: ['ALL=(ALL) NOPASSWD:ALL']
              groups: sudo
              shell: /bin/bash
              ssh_authorized_keys:
                - {{ (ssh_key.content | b64decode).strip() }}
          chpasswd:
            list: |
              ubuntu:ubuntu
            expire: false
          ssh_pwauth: true
          package_update: false
          package_upgrade: false
          runcmd:
            - systemctl enable ssh
            - systemctl start ssh

    - name: Create cloud-init meta-data
      copy:
        dest: "{{ vm_base_dir }}/{{ vm_name }}/meta-data"
        mode: '0644'
        content: |
          instance-id: {{ vm_name }}
          local-hostname: {{ vm_name }}

    - name: Create cloud-init ISO
      command: |
        {{ homebrew_prefix }}/bin/mkisofs -output "{{ vm_base_dir }}/{{ vm_name }}/cloud-init.iso" \
          -volid cidata -joliet -rock -input-charset utf-8 \
          "{{ vm_base_dir }}/{{ vm_name }}/user-data" \
          "{{ vm_base_dir }}/{{ vm_name }}/meta-data"
      args:
        creates: "{{ vm_base_dir }}/{{ vm_name }}/cloud-init.iso"

    - name: Check if VM is already running
      shell: "pgrep -f 'qemu.*{{ vm_name }}' || true"
      register: vm_check
      changed_when: false

    - name: Kill existing VM if running
      command: "pkill -f 'qemu.*{{ vm_name }}'"
      when: vm_check.stdout != ""
      ignore_errors: true

    - name: Start VM
      command: |
        {{ homebrew_prefix }}/bin/qemu-system-x86_64 \
          -name {{ vm_name }} \
          -m {{ vm_memory }} \
          -smp {{ vm_cpus }} \
          -cpu qemu64 \
          -machine type=q35,accel=tcg \
          -drive file="{{ vm_base_dir }}/{{ vm_name }}/disk.qcow2",format=qcow2,if=virtio \
          -drive file="{{ vm_base_dir }}/{{ vm_name }}/cloud-init.iso",format=raw,if=ide,media=cdrom \
          -netdev user,id=net0,hostfwd=tcp:0.0.0.0:{{ ssh_port }}-:22 \
          -device virtio-net-pci,netdev=net0 \
          -display none \
          -serial file:{{ vm_base_dir }}/{{ vm_name }}/console.log \
          -daemonize
      register: qemu_output
      
    - name: Debug QEMU output
      debug:
        var: qemu_output

    - name: Wait for VM to boot and SSH to be available
      wait_for:
        port: "{{ ssh_port }}"
        host: localhost
        delay: 30
        timeout: 300
        sleep: 5
      register: ssh_check

    - name: Add VM to inventory
      add_host:
        name: "{{ vm_name }}"
        ansible_host: host.docker.internal
        ansible_port: "{{ ssh_port }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        groups: qemu_vms

    - name: Add VM to inventory file
      block:
        - name: Ensure qemu_vms group exists
          lineinfile:
            path: "{{ ansible_env.HOME }}/InfinityLabs/Ansible/dockerized ansible attempt/inventory/hosts"
            line: "[qemu_vms]"
            create: yes
            mode: '0644'
            
        - name: Add VM to inventory file
          lineinfile:
            path: "{{ ansible_env.HOME }}/InfinityLabs/Ansible/dockerized ansible attempt/inventory/hosts"
            regexp: "^{{ vm_name }}.*$"
            line: "{{ vm_name }} ansible_host=host.docker.internal ansible_port={{ ssh_port }} ansible_user=ubuntu"
            insertafter: "^\\[qemu_vms\\]"
            state: present
            mode: '0644'

- name: Test VM Connection
  hosts: test-ubuntu
  gather_facts: false
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    vm_base_dir: "{{ hostvars['host.docker.internal']['ansible_env']['HOME'] }}/vms/test"
    vm_name: "test-ubuntu"
  tasks:
    - name: Wait for cloud-init to complete
      raw: cloud-init status --wait
      register: cloud_init_result
      until: cloud_init_result.rc == 0
      retries: 30
      delay: 10

    - name: Get VM information
      command: hostname
      register: hostname_result

    - name: Display VM information
      debug:
        msg: |
          VM Creation Test Completed:
          Hostname: {{ hostname_result.stdout }}
          SSH Port: {{ ansible_port }}
          Username: {{ ansible_user }}
          Location: {{ vm_base_dir }}/{{ vm_name }} 